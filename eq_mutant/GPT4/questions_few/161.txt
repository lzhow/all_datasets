Please analyze the two following provided code files in C or Java. Identify if they are semantically equal. 'Semantically equal' means two codes have the same meaning, that they have the same output given the same input.&#10;Here are three semantically equal examples:  &#10;The first example pair is&#10;``` Code 1&#10;double f(double M, double x) {&#10;    x = (M + x) / 2;&#10;    return x;&#10; }&#10;```&#10;``` Mutant Code 1&#10;double f(double M, double x) {&#10;    x = (M + x++ ) / 2;&#10;    return x;&#10; }&#10;```&#10;Yes. The two codes are semantically euqal because `M + x++` first does `M + x` and then `x++`. Therefore, `(M + x) / 2` is the same with `(M + x++) / 2`.&#10;&#10;&#10;The second example pair is &#10;``` Code 2&#10;double f(int x, int divisor){&#10;   return x*divisor;&#10;}&#10;```&#10;```Mutant Code 2&#10;double f(int x, int divisor){&#10;    return x*divisor++;&#10;}&#10;```&#10;Yes. The two codes are semantically euqal because `x*divisor` first does `x*divisor` and then `divisor++`. The two functions return the same values.&#10;&#10;&#10;The third example pair is &#10;``` Code 3&#10;int f(int a, int y, int x){&#10;    int p = a;&#10;    p = x + y;&#10;    return p;&#10;}&#10;```&#10;``` Mutant Code 3&#10;int f(int a, int y, int x){&#10;    int p = 1;&#10;    p = x + y;&#10;    return p;&#10;}&#10;```&#10;Yes. The two codes are semantically euqal because the local value `p` is re-assigned by `x+y`. There, the change `int p = 1;` will not affect the function.&#10;&#10;  &#10;&#10;Please identify if the two following codes are semantically equal. Please only answer `yes` or `no`. `yes` means they are semantically equal. `no` means they are not. &#10;Input :&#10;    ```Code &#10;#include <stdio.h>&#10;#include <math.h>&#10;int main(a, b, c)&#10;unsigned int a;&#10;unsigned int b;&#10;unsigned int c;&#10;{	&#10;	int t;&#10;	if(a>b)&#10;	{&#10;		t=a;&#10;		a=b;&#10;		b=t;&#10;	}&#10;	if(a>c)&#10;	{&#10;		t=a;&#10;		a=b;&#10;		c=t;&#10;	}  &#10;	if(b>c)&#10;	{&#10;		t=b;&#10;		b=c;&#10;		c=t;&#10;	}&#10;	if(a+b<=c)&#10;	    return 0;&#10;	else if(a==b&&b==c)&#10;	    return 3;&#10;	else if(a==b||b==c)&#10;	    return 2;&#10;	else&#10;	    return 1;&#10;}&#10;&#10;```&#10;```Mutant Code &#10;#include <stdio.h>&#10;#include <math.h>&#10;int main(a, b, c)&#10;unsigned int a;&#10;unsigned int b;&#10;unsigned int c;&#10;{	&#10;	int t;&#10;	if(a>b)&#10;	{&#10;		t=a;&#10;		a=b;&#10;		b=t;&#10;	}&#10;	if(a>=c)&#10;	{&#10;		t=a;&#10;		a=b;&#10;		c=t;&#10;	}  &#10;	if(b>c)&#10;	{&#10;		t=b;&#10;		b=c;&#10;		c=t;&#10;	}&#10;	if(a+b<=c)&#10;	    return 0;&#10;	else if(a==b&&b==c)&#10;	    return 3;&#10;	else if(a==b||b==c)&#10;	    return 2;&#10;	else&#10;	    return 1;&#10;}&#10;&#10;```&#10;The difference patch is &#10;&#10;    ```&#10;    @@ -15 +15 @@&#10;-	if(a>c)&#10;+	if(a>=c)&#10;&#10;    ```