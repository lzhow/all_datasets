Please analyze the two following provided code files in C or Java. Identify if they are semantically equal. 'Semantically equal' means two codes have the same meaning, that they have the same output given the same input.&#10;Here are three semantically equal examples:  &#10;The first example pair is&#10;``` Code 1&#10;double f(double M, double x) {&#10;    x = (M + x) / 2;&#10;    return x;&#10; }&#10;```&#10;``` Mutant Code 1&#10;double f(double M, double x) {&#10;    x = (M + x++ ) / 2;&#10;    return x;&#10; }&#10;```&#10;Yes. The two codes are semantically euqal because `M + x++` first does `M + x` and then `x++`. Therefore, `(M + x) / 2` is the same with `(M + x++) / 2`.&#10;&#10;&#10;The second example pair is &#10;``` Code 2&#10;double f(int x, int divisor){&#10;   return x*divisor;&#10;}&#10;```&#10;```Mutant Code 2&#10;double f(int x, int divisor){&#10;    return x*divisor++;&#10;}&#10;```&#10;Yes. The two codes are semantically euqal because `x*divisor` first does `x*divisor` and then `divisor++`. The two functions return the same values.&#10;&#10;&#10;The third example pair is &#10;``` Code 3&#10;int f(int a, int y, int x){&#10;    int p = a;&#10;    p = x + y;&#10;    return p;&#10;}&#10;```&#10;``` Mutant Code 3&#10;int f(int a, int y, int x){&#10;    int p = 1;&#10;    p = x + y;&#10;    return p;&#10;}&#10;```&#10;Yes. The two codes are semantically euqal because the local value `p` is re-assigned by `x+y`. There, the change `int p = 1;` will not affect the function.&#10;&#10;  &#10;&#10;Please identify if the two following codes are semantically equal. Please only answer `yes` or `no`. `yes` means they are semantically equal. `no` means they are not. &#10;Input :&#10;    ```Code &#10;main() &#10;{ &#10;	int a[4]={-14,6,28};&#10;	int number,temp1,temp2,end,i,j; &#10;	printf("original array is:\n"); &#10;	for(i=0;i<3;i++) &#10;		printf("%5d",a[i]); &#10;	printf("\n"); &#10;	printf("insert a new number:"); &#10;	scanf("%d",&number); &#10;	end=a[2]; &#10;	if(number>=end) &#10;		a[3]=number; &#10;	else &#10;	{&#10;		for(i=0;i<3;i++) &#10;		{ &#10;			if(a[i]>number) &#10;			{&#10;				temp1=a[i]; &#10;				a[i]=number; &#10;				for(j=i+1;j<4;j++)&#10;				{&#10;					temp2=a[j]; &#10;					a[j]=temp1; &#10;					temp1=temp2;&#10;				} &#10;				break;&#10;			}&#10;		} &#10;	} &#10;	for(i=0;i<4;i++) &#10;		printf("%6d",a[i]); &#10;	printf("\n");&#10;}&#10;```&#10;```Mutant Code &#10;main() &#10;{ &#10;	int a[4]={-14,6,28};&#10;	int number,temp1,temp2,end,i,j; &#10;	printf("original array is:\n"); &#10;	for(i=0;i<3;i++) &#10;		printf("%5d",a[i]); &#10;	printf("\n"); &#10;	printf("insert a new number:"); &#10;	scanf("%d",&number); &#10;	end=a[2]; &#10;	if(number>=end) &#10;		a[3]=number; &#10;	else &#10;	{&#10;		for(i=0;i<3;i++) &#10;		{ &#10;			if(a[i]>number) &#10;			{&#10;				temp1=a[i]; &#10;				a[i]=number; &#10;				for(j=i+1;j<4;j++)&#10;				{&#10;					temp2=a[j]; &#10;					a[j]=temp1; &#10;					temp1=temp2;&#10;				} &#10;				break;&#10;			}&#10;		} &#10;	} &#10;	for(i=0;i<4;i++) &#10;		printf("%6d",a[i]++);&#10;	printf("\n");&#10;}&#10;```&#10;The difference patch is &#10;&#10;    ```&#10;    @@ -33 +33 @@&#10;-		printf("%6d",a[i]);&#10;+		printf("%6d",a[i]++);&#10;&#10;    ```