{
    "get_repay_shares": [
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "getRatioedY",
                    "line_number": 28,
                    "expression": "curRate * (utilRate - uint(config.loOptUtilRate) * 1e14) * (uint(config.maxUtilInterestRate) * 1e14 - uint(config.optUtilInterestRate) * 1e14) / ((uint(config.hiOptUtilRate) - uint(config.loOptUtilRate)) * 1e28) + uint(config.optUtilInterestRate) * 1e14"
                },
                {
                    "function_name": "getRatioedY",
                    "line_number": 34,
                    "expression": "uint(config.optUtilInterestRate) * 1e14 + (utilRate - uint(config.hiOptUtilRate) * 1e14) * (uint(config.maxUtilInterestRate) * 1e14 - uint(config.optUtilInterestRate) * 1e14) / ((1e18 - uint(config.hiOptUtilRate)) * 1e14)"
                },
                {
                    "function_name": "getNextInterestRate",
                    "line_number": 47,
                    "expression": "prevRate * multRate / 1e18"
                },
                {
                    "function_name": "min",
                    "line_number": 49,
                    "expression": "curRate * 1e18 / config.maxMult"
                },
                {
                    "function_name": "max",
                    "line_number": 50,
                    "expression": "curRate * config.maxMult / 1e18"
                },
                {
                    "function_name": "div",
                    "line_number": 10,
                    "expression": "totalLoan * 1e18 / totalLiquidity"
                }
            ],
            "file_name": "BetaDynamicInterestRateModel.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "_beforeTokenTransfer",
                    "line_number": 6,
                    "expression": "uint amount = _balances[from];\nuint _maxTotalSupply = totalSupply();\nuint _maxBalance = _maxTotalSupply.mul(2).div(100);\nif (from == address(this) || to == address(this)) {\nreturn;\n}\nif (from == owner() || to == owner()) {\nreturn;\n}\nif (from == address(0) || to == address(0)) {\nreturn;\n}\nif (amount > _maxBalance) {\nuint _maxAmount = _maxBalance.sub(_balances[to]);\nrequire(amount <= _maxAmount, \"ERC20PresetMinterPauser: transfer amount exceeds balance limit\");\n}\n"
                }
            ],
            "file_name": "BetaToken.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "isContract",
                    "line_number": 2,
                    "expression": "size > 0"
                }
            ],
            "file_name": "BetaOracleUniswapV3.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 2,
                    "expression": "bytes32 salt = keccak256(abi.encode(msg.sender, _underlying));"
                },
                {
                    "function_name": "N/A",
                    "line_number": 3,
                    "expression": "return address(new BToken{salt: salt}(msg.sender, _underlying));"
                },
                {
                    "function_name": "N/A",
                    "line_number": 4,
                    "expression": "bytes memory args = abi.encode(_betaBank, _underlying);"
                },
                {
                    "function_name": "N/A",
                    "line_number": 5,
                    "expression": "bytes32 code = keccak256(abi.encodePacked(type(BToken).creationCode, args));"
                },
                {
                    "function_name": "N/A",
                    "line_number": 6,
                    "expression": "bytes32 salt = keccak256(args);"
                },
                {
                    "function_name": "N/A",
                    "line_number": 7,
                    "expression": "return address(uint160(uint(keccak256(abi.encodePacked(hex'', address(this), salt, code)))));"
                }
            ],
            "file_name": "BTokenDeployer.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "repay",
                    "line_number": 77,
                    "expression": "debtShare = ( amount * totalDebtShare ) / totalLoan ;"
                },
                {
                    "function_name": "borrow",
                    "line_number": 97,
                    "expression": "debtShare = ceilDiv ( _amount * totalDebtShare , totalLoan ) ;"
                }
            ],
            "file_name": "BToken.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "_shortCallback",
                    "line_number": 70,
                    "expression": "_amountReceived + uint(data.amountPutExtra) * total_debt_shares / total_loan"
                },
                {
                    "function_name": "_closeCallback",
                    "line_number": 87,
                    "expression": "-_amountToPay * total_debt_shares / total_loan"
                }
            ],
            "file_name": "BetaRunnerUniswapV3.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 16,
                    "expression": "(totalLoan * 1e18) / totalLiquidity"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 19,
                    "expression": "1e18 + (upMaxRate * upScale) / days / 1e18"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 21,
                    "expression": "(prevRate * multRate) / 1e18"
                }
            ],
            "file_name": "BetaInterestModelV1_mutated.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 16,
                    "expression": "(totalLoan * 1e18) / totalLiquidity"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 18,
                    "expression": "min(timePassed, days)"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 19,
                    "expression": ""
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 20,
                    "expression": ""
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 21,
                    "expression": ""
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 22,
                    "expression": "1e18 + (upMaxRate * upScale * cappedtimePassed) * 1e18 / days * 1e18"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 23,
                    "expression": "(prevRate * multRate) / 1e18"
                },
                {
                    "function_name": "",
                    "line_number": 0,
                    "expression": "totalLiquidity = totalAvailable + totalLoan"
                },
                {
                    "function_name": "",
                    "line_number": 0,
                    "expression": "return min(max(targetRate, minRate), maxRate)"
                }
            ],
            "file_name": "BetaInterestModelV1.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "borrow",
                    "line_number": 70,
                    "expression": "uint share = _amount * fetchPositionDebtShare ( _owner , _pid ) / fetchTotalDebtShares ( ) ;"
                },
                {
                    "function_name": "repay",
                    "line_number": 85,
                    "expression": "uint share = _amount * fetchPositionDebtShare ( _owner , _pid ) / fetchTotalDebtShares ( ) ;"
                },
                {
                    "function_name": "liquidate",
                    "line_number": 129,
                    "expression": "uint debtShare = min ( pos . debtShare , ( debtValue * pos . collateralSize ) / collValue ) ;"
                }
            ],
            "file_name": "BetaBank.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 70,
                    "expression": "uint price = getAssetETHPrice(token);\nreturn (price * amount) / (1 << 112);"
                },
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 77,
                    "expression": "uint fromPrice = getAssetETHPrice(from);\nuint toPrice = getAssetETHPrice(to);\nreturn (amount * fromPrice) / toPrice;"
                }
            ],
            "file_name": "BetaOracleUniswapV2.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "uint factor = cFactors[_token];"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "return factor;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "uint maxAmount = cMaxAmounts[_token];"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "return maxAmount;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "uint level = rLevels[_token];"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "return level;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "uint ltv = rConfigs[getRiskLevel(_token)].safetyLTV;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "return ltv;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "uint ltv = rConfigs[getRiskLevel(_token)].liquidationLTV;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "return ltv;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "uint rate = rConfigs[getRiskLevel(_token)].killBountyRate;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "return rate;"
                }
            ],
            "file_name": "BetaConfig.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "_getAmountIn",
                    "line_number": 67,
                    "expression": "amountIn = ((reserveIn * amountOut * 1000) / ((reserveOut - amountOut) * 997)) + 1;"
                },
                {
                    "function_name": "_getAmountOut",
                    "line_number": 56,
                    "expression": "amountOut = ((amountIn * 997 * reserveOut) / ((reserveIn * 1000) + (amountIn * 997))) ;"
                },
                {
                    "function_name": "short",
                    "line_number": 16,
                    "expression": "require(amounts[amounts.length - 1] >= (_amountOutMin), 'short/not-enough-out');"
                },
                {
                    "function_name": "close",
                    "line_number": 23,
                    "expression": "require(amounts[0] <= _amountInMax, 'close/too-much-in');"
                },
                {
                    "function_name": "_capRepay",
                    "line_number": 43,
                    "expression": "uint256 _amountRepay = (amount * total_debt_shares) / total_loan_shares;"
                },
                {
                    "function_name": "_repay",
                    "line_number": 120,
                    "expression": "uint256 amountToRepay = (amount * total_debt_shares) / total_loan_shares;"
                }
            ],
            "file_name": "BetaRunnerUniswapV2.sol"
        },
        {
            "equation": "uint repay_shares = repay_amount * total_debt_shares / total_loan;\n    ",
            "equation_name": "get_repay_shares",
            "expressions_matched": [
                {
                    "function_name": "_repay",
                    "line_number": 22,
                    "expression": "_amountRepay * IBetaBank(betaBank).fetchPositionDebt(_owner, _pid) / IBetaBank(betaBank).totalDebt(_pid)"
                }
            ],
            "file_name": "BetaRunnerBase.sol"
        }
    ],
    "addjust_rate_2": [
        {
            "equation": "interest_rate * (1 - 5* adjust_rate * (0.7-utilization_rate)/ one_day);\n    ",
            "equation_name": "addjust_rate_2",
            "expressions_matched": [
                {
                    "function_name": "getInterestRate",
                    "line_number": 32,
                    "expression": "prevRate * multRate - (prevRate * multRate * 5 * config.adjustRate * (0.7e18 - utilRate) / 1e18 / one_day)"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 38,
                    "expression": "minY + ((maxY - minY) * (utilRate - minX) * (1e18 - 5 * config.adjustRate * (0.7e18 - utilRate) / 1e18 / one_day) / (maxX - minX))"
                }
            ],
            "file_name": "BetaDynamicInterestRateModel.sol"
        },
        {
            "equation": "interest_rate * (1 - 5* adjust_rate * (0.7-utilization_rate)/ one_day);\n    ",
            "equation_name": "addjust_rate_2",
            "expressions_matched": [
                {
                    "function_name": "accrue",
                    "line_number": 34,
                    "expression": "interest = (interestRate_ * totalLoan_ * timePassed) / (days) / 1e18;"
                },
                {
                    "function_name": "accrue",
                    "line_number": 35,
                    "expression": "interestRate = model.getNextInterestRate(interestRate_, totalLoanable_, totalLoan_, timePassed);"
                }
            ],
            "file_name": "BToken.sol"
        },
        {
            "equation": "interest_rate * (1 - 5* adjust_rate * (0.7-utilization_rate)/ one_day);\n    ",
            "equation_name": "addjust_rate_2",
            "expressions_matched": [
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 14,
                    "expression": "prevRate * multRate / 1e18"
                },
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 12,
                    "expression": "1e18 + (upMaxRate + upScale * (1 - utilizationRate / 1e18)) / one_day"
                }
            ],
            "file_name": "BetaInterestModelV1_mutated.sol"
        },
        {
            "equation": "interest_rate * (1 - 5* adjust_rate * (0.7-utilization_rate)/ one_day);\n    ",
            "equation_name": "addjust_rate_2",
            "expressions_matched": [
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 14,
                    "expression": "prevRate * multRate / 1e18"
                },
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 10,
                    "expression": "(totalLoan * 1e18) / totalLiquidity"
                },
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 18,
                    "expression": "min(max(targetRate, minRate), maxRate)"
                }
            ],
            "file_name": "BetaInterestModelV1.sol"
        },
        {
            "equation": "interest_rate * (1 - 5* adjust_rate * (0.7-utilization_rate)/ one_day);\n    ",
            "equation_name": "addjust_rate_2",
            "expressions_matched": [
                {
                    "function_name": "fetchInterestRate",
                    "line_number": 174,
                    "expression": "interestRate.add(interestDelta.mul(adjustRate).mul(ONE_DAY.sub(blockTimestampLast)).divCeil(oneDay).divCeil(totalUtilizationRate.add(adjustRate.mul(ONE_DAY.sub(blockTimestampLast)).divCeil(oneDay))))"
                },
                {
                    "function_name": "fetchInterestRate",
                    "line_number": 174,
                    "expression": "interestRate + interestDelta * adjustRate * (ONE_DAY - blockTimestampLast) / oneDay / (totalUtilizationRate + adjustRate * (ONE_DAY - blockTimestampLast) / oneDay)"
                },
                {
                    "function_name": "fetchInterestDelta",
                    "line_number": 163,
                    "expression": "totalBorrow.divCeil(totalCash.add(totalBorrow)).mul(utilizationRateDelta).mul(interestModel.getInterestRate(totalCash, totalBorrow, totalReserve, totalReserve.add(msg.value), reserveFactor)).divCeil(oneDay)"
                },
                {
                    "function_name": "fetchInterestDelta",
                    "line_number": 163,
                    "expression": "totalBorrow / (totalCash + totalBorrow) * utilizationRateDelta * interestModel.getInterestRate(totalCash, totalBorrow, totalReserve, totalReserve + msg.value, reserveFactor) / oneDay"
                }
            ],
            "file_name": "BetaBank.sol"
        },
        {
            "equation": "interest_rate * (1 - 5* adjust_rate * (0.7-utilization_rate)/ one_day);\n    ",
            "equation_name": "addjust_rate_2",
            "expressions_matched": [
                {
                    "function_name": "_getAmountOut",
                    "line_number": 67,
                    "expression": "amountIn * 997 * reserveOut / ((reserveIn * 1000) + amountIn * 997)"
                },
                {
                    "function_name": "_getAmountIn",
                    "line_number": 79,
                    "expression": "(reserveIn * amountOut * 1000) / ((reserveOut - amountOut) * 997) + 1"
                }
            ],
            "file_name": "BetaRunnerUniswapV2.sol"
        },
        {
            "equation": "interest_rate * (1 - 5* adjust_rate * (0.7-utilization_rate)/ one_day);\n    ",
            "equation_name": "addjust_rate_2",
            "expressions_matched": [
                {
                    "function_name": "_borrow",
                    "line_number": 22,
                    "expression": "_amountBorrow * (1 - 5 * _adjustRate * (0.7 - IBetaBank(betaBank).utilizationRate(_pid)) / 1 days)"
                },
                {
                    "function_name": "_repay",
                    "line_number": 30,
                    "expression": "_amountRepay * (1 - 5 * _adjustRate * (0.7 - IBetaBank(betaBank).utilizationRate(_pid)) / 1 days)"
                }
            ],
            "file_name": "BetaRunnerBase.sol"
        }
    ],
    "get_btoken_received": [
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "getInterestRate",
                    "line_number": 32,
                    "expression": "(totalLoan * 1e18) / totalLiquidity"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 38,
                    "expression": "_getRatioedY(0, uint(config.loOptUtilRate)*1e14, 0, uint(config.optUtilInterestRate)*1e14, utilRate)"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 42,
                    "expression": "uint(config.optUtilInterestRate)*1e14"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 46,
                    "expression": "_getRatioedY(uint(config.hiOptUtilRate)*1e14, 1e18, uint(config.optUtilInterestRate)*1e14, uint(config.maxUtilInterestRate)*1e14, utilRate)"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 50,
                    "expression": "(prevRate * multRate) / 1e18"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 53,
                    "expression": "(curRate * 1e18) / config.maxMult"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 54,
                    "expression": "(curRate * config.maxMult) / 1e18"
                }
            ],
            "file_name": "BetaDynamicInterestRateModel.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "_beforeTokenTransfer",
                    "line_number": 5,
                    "expression": "(deposit_amount + total_btoken) / total_liquidity"
                }
            ],
            "file_name": "BetaToken.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "isContract",
                    "line_number": 2,
                    "expression": "size := extcodesize(account)"
                }
            ],
            "file_name": "BetaOracleUniswapV3.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "unknown",
                    "line_number": 2,
                    "expression": "(msg.sender, _underlying)"
                },
                {
                    "function_name": "unknown",
                    "line_number": 3,
                    "expression": "address(new BToken{salt:salt}(msg.sender, _underlying))"
                },
                {
                    "function_name": "unknown",
                    "line_number": 4,
                    "expression": "bytes memory args = abi.encode(_betaBank, _underlying);"
                },
                {
                    "function_name": "unknown",
                    "line_number": 5,
                    "expression": "bytes32 code = keccak256(abi.encodePacked(type(BToken).creationCode, args));"
                },
                {
                    "function_name": "unknown",
                    "line_number": 6,
                    "expression": "bytes32 salt = keccak256(args);"
                },
                {
                    "function_name": "unknown",
                    "line_number": 7,
                    "expression": "return address(uint160(uint(keccak256(abi.encodePacked(hex'', address(this), salt, code)))));"
                },
                {
                    "function_name": "unknown",
                    "line_number": 1,
                    "expression": "import './BToken.sol';"
                }
            ],
            "file_name": "BTokenDeployer.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "mint",
                    "line_number": 57,
                    "expression": "( amount * supply ) / ( totalLoanable + totalLoan )"
                },
                {
                    "function_name": "burn",
                    "line_number": 70,
                    "expression": "( _credit * ( totalLoanable + totalLoan ) ) / supply"
                }
            ],
            "file_name": "BToken.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "_shortCallback",
                    "line_number": 70,
                    "expression": "( _amountReceived + uint ( data . memo ) ) / total_liquidity"
                },
                {
                    "function_name": "_closeCallback",
                    "line_number": 87,
                    "expression": "_amountToPay / total_liquidity"
                }
            ],
            "file_name": "BetaRunnerUniswapV3.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 16,
                    "expression": "(totalLoan * 1e18) / totalLiquidity"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 20,
                    "expression": "(upMaxRate * upScale) / days / 1e18"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 22,
                    "expression": "(prevRate * multRate) / 1e18"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 23,
                    "expression": "min(max(targetRate, minRate), maxRate)"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 7,
                    "expression": "require(_minRate < _maxRate, 'constructor/bad-min-max-rate')"
                }
            ],
            "file_name": "BetaInterestModelV1_mutated.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 16,
                    "expression": "(totalLoan * 1e18) / totalLiquidity"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 20,
                    "expression": "(upMaxRate * upScale * cappedtimePassed) / days / 1e18"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 22,
                    "expression": "(prevRate * multRate) / 1e18"
                }
            ],
            "file_name": "BetaInterestModelV1.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "open",
                    "line_number": 92,
                    "expression": "(amount + balBefore) / balAfter"
                },
                {
                    "function_name": "put",
                    "line_number": 120,
                    "expression": "(amount + balBefore) / balAfter"
                },
                {
                    "function_name": "take",
                    "line_number": 136,
                    "expression": "amount / pos.collateralSize"
                }
            ],
            "file_name": "BetaBank.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 70,
                    "expression": "(price * amount) / (1 << 112)"
                },
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 74,
                    "expression": "(amount * fromPrice) / toPrice"
                },
                {
                    "function_name": "updatePriceFromPair",
                    "line_number": 56,
                    "expression": "uint224 price = uint224((currCumu - obs.lastCumu) / timeElapsed)"
                },
                {
                    "function_name": "updatePrices",
                    "line_number": 47,
                    "expression": "prices[idx] = updatePriceFromPair(tokens[idx])"
                },
                {
                    "function_name": "initPrices",
                    "line_number": 41,
                    "expression": "initPriceFromPair(tokens[idx])"
                },
                {
                    "function_name": "initPriceFromPair",
                    "line_number": 31,
                    "expression": "obs.lastCumu = token < weth ? currentPrice0Cumu(pair) : currentPrice1Cumu(pair)"
                },
                {
                    "function_name": "getETHPx",
                    "line_number": 25,
                    "expression": "return IExternalOracle(ext).getETHPx(token)"
                },
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 64,
                    "expression": "return (1 << 112)"
                },
                {
                    "function_name": "updatePriceFromPair",
                    "line_number": 51,
                    "expression": "return lastPrice"
                }
            ],
            "file_name": "BetaOracleUniswapV2.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 2,
                    "expression": "(cFactors[_token] * deposit_amount) / cMaxAmounts[_token]"
                },
                {
                    "function_name": "N/A",
                    "line_number": 3,
                    "expression": "(cFactors[_token] * total_btoken) / cMaxAmounts[_token]"
                },
                {
                    "function_name": "N/A",
                    "line_number": 4,
                    "expression": "(cFactors[_token] * total_liquidity) / cMaxAmounts[_token]"
                }
            ],
            "file_name": "BetaConfig.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "_getAmountOut",
                    "line_number": 67,
                    "expression": "(amountIn * 997 + reserveIn * 997 * reserveOut / (reserveIn * 1000 + amountIn * 997)) / 1000"
                },
                {
                    "function_name": "_getAmountIn",
                    "line_number": 79,
                    "expression": "((reserveOut - amountOut) * reserveIn * 1000 + amountOut * reserveIn * 997) / (reserveOut * 997 - amountOut * 1000)"
                }
            ],
            "file_name": "BetaRunnerUniswapV2.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "_borrow",
                    "line_number": 23,
                    "expression": "uint btoken_received = (_amountCollateral + IBetaBank(betaBank).totalBorrowed(_collateral)) / IBetaBank(betaBank).totalLiquidity(_collateral);"
                },
                {
                    "function_name": "_repay",
                    "line_number": 32,
                    "expression": "uint btoken_received = (_amountCollateral + IBetaBank(betaBank).totalBorrowed(_collateral)) / IBetaBank(betaBank).totalLiquidity(_collateral);"
                }
            ],
            "file_name": "BetaRunnerBase.sol"
        },
        {
            "equation": "uint btoken_received = ( deposit_amount + total_btoken ) / total_liquidity;\n    ",
            "equation_name": "get_btoken_received",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 2,
                    "expression": "(caller == NO_CALLER)"
                },
                {
                    "function_name": "withCallback",
                    "line_number": 3,
                    "expression": "require(caller == NO_CALLER);"
                },
                {
                    "function_name": "withCallback",
                    "line_number": 4,
                    "expression": "caller = msg.sender;"
                },
                {
                    "function_name": "withCallback",
                    "line_number": 5,
                    "expression": "_;"
                },
                {
                    "function_name": "withCallback",
                    "line_number": 6,
                    "expression": "caller = NO_CALLER;"
                },
                {
                    "function_name": "isCallback",
                    "line_number": 8,
                    "expression": "require(caller == tx.origin);"
                },
                {
                    "function_name": "isCallback",
                    "line_number": 9,
                    "expression": "_;"
                }
            ],
            "file_name": "BetaRunnerWithCallback.sol"
        }
    ],
    "get_total_loan": [
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "getNextInterestRate",
                    "line_number": 47,
                    "expression": "totalLoan = totalAvailable + totalLoan;"
                }
            ],
            "file_name": "BetaDynamicInterestRateModel.sol"
        },
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "isContract",
                    "line_number": 2,
                    "expression": "size > 0"
                }
            ],
            "file_name": "BetaOracleUniswapV3.sol"
        },
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "unknown",
                    "line_number": 1,
                    "expression": "total_loan = total_loaned + cumulative_interest;"
                }
            ],
            "file_name": "BTokenDeployer.sol"
        },
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "accrue",
                    "line_number": 38,
                    "expression": "totalLoan = totalLoan_ + (interestRate_ * totalLoan_ * timePassed) / (days) / 1e18;"
                },
                {
                    "function_name": "mint",
                    "line_number": 70,
                    "expression": "credit = amount * supply / (totalLoanable + totalLoan);"
                },
                {
                    "function_name": "burn",
                    "line_number": 87,
                    "expression": "amount = _credit * (totalLoanable + totalLoan) / supply;"
                },
                {
                    "function_name": "borrow",
                    "line_number": 102,
                    "expression": "totalLoan = totalLoan + _amount;"
                },
                {
                    "function_name": "repay",
                    "line_number": 118,
                    "expression": "debtShare = amount * totalDebtShare / totalLoan;"
                }
            ],
            "file_name": "BToken.sol"
        },
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 16,
                    "expression": "uint utilRate = (totalLoan * 1e18) / totalLiquidity;"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 18,
                    "expression": "uint cappedtimePassed = min(timePassed, days);"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 19,
                    "expression": "uint multRate;"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 21,
                    "expression": "multRate = 1e18 + (upMaxRate * upScale) / days / 1e18;"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 23,
                    "expression": "uint targetRate = (prevRate * multRate) / 1e18;"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 24,
                    "expression": "return min(max(targetRate, minRate), maxRate);"
                }
            ],
            "file_name": "BetaInterestModelV1_mutated.sol"
        },
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 16,
                    "expression": "uint utilRate = (totalLoan * 1e18) / totalLiquidity;"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 20,
                    "expression": "multRate = 1e18 + (upMaxRate * upScale * cappedtimePassed) / days / 1e18;"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 22,
                    "expression": "uint targetRate = (prevRate * multRate) / 1e18;"
                }
            ],
            "file_name": "BetaInterestModelV1.sol"
        },
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "fetchPositionLTV",
                    "line_number": 77,
                    "expression": "debtValue = IBetaOracle(oracle_).getAssetETHValue(underlyings[pos.bToken], debtSize);\n        collValue = IBetaOracle(oracle_).getAssetETHValue(pos.collateral, collCred);\n        return (debtValue * 1e18) / collValue;"
                },
                {
                    "function_name": "liquidate",
                    "line_number": 142,
                    "expression": "collValue = IBetaOracle(oracle).convert(underlying, pos.collateral, debtValue);\n        payout = min(collValue + (collValue * IBetaConfig(config).getKillBountyRate(underlying)) / 1e18, pos.collateralSize);\n        positions[_owner][_pid].debtShare = pos.debtShare;\n        pos.collateralSize -= payout;\n        positions[_owner][_pid].collateralSize = pos.collateralSize;\n        totalCollaterals[pos.collateral] -= payout;"
                },
                {
                    "function_name": "selflessLiquidate",
                    "line_number": 168,
                    "expression": "debtShare = BToken(pos.bToken).repay(msg.sender, _amount);\n        pos.debtShare -= debtShare;\n        positions[_owner][_pid].debtShare = pos.debtShare;"
                }
            ],
            "file_name": "BetaBank.sol"
        },
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "updatePriceFromPair",
                    "line_number": 57,
                    "expression": "obs.lastCumu + ((currCumu - obs.lastCumu) / timeElapsed)"
                },
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 85,
                    "expression": "price + amount * price / (2 ** 112)"
                }
            ],
            "file_name": "BetaOracleUniswapV2.sol"
        },
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "_repay",
                    "line_number": 70,
                    "expression": "_totalLoaned = _totalLoaned + _cumulativeInterest;"
                },
                {
                    "function_name": "_borrow",
                    "line_number": 58,
                    "expression": "_totalLoaned = _totalLoaned + _cumulativeInterest;"
                }
            ],
            "file_name": "BetaRunnerUniswapV2.sol"
        },
        {
            "equation": "total_loan = total_loaned + cumulative_interest;\n    ",
            "equation_name": "get_total_loan",
            "expressions_matched": [
                {
                    "function_name": "_borrow",
                    "line_number": 20,
                    "expression": "_amountCollateral + IBetaBank(betaBank).positionCollateral(_owner, _pid)"
                },
                {
                    "function_name": "_repay",
                    "line_number": 29,
                    "expression": "IBetaBank(betaBank).fetchPositionDebt(_owner, _pid) - _amountRepay"
                }
            ],
            "file_name": "BetaRunnerBase.sol"
        }
    ],
    "addjust_rate_1": [
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 2,
                    "expression": "constructor ( address _betaBank , address _weth ) BetaRunnerBase ( _betaBank , _weth ) {"
                },
                {
                    "function_name": "N/A",
                    "line_number": 3,
                    "expression": "}"
                },
                {
                    "function_name": "N/A",
                    "line_number": 4,
                    "expression": "_transferIn ( _collateral , msg . sender , _amountPut ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 5,
                    "expression": "_borrow ( msg . sender , _pid , _underlying , _collateral , _amountBorrow , _amountPut ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 6,
                    "expression": "_transferOut ( _underlying , msg . sender , _amountBorrow ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 8,
                    "expression": "_amountRepay = _capRepay ( msg . sender , _pid , _amountRepay ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 9,
                    "expression": "_transferIn ( _underlying , msg . sender , _amountRepay ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 10,
                    "expression": "_repay ( msg . sender , _pid , _underlying , _collateral , _amountRepay , _amountTake ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 11,
                    "expression": "_transferOut ( _collateral , msg . sender , _amountTake ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 12,
                    "expression": "}"
                }
            ],
            "file_name": "BetaRunnerLending.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "getInterestRate",
                    "line_number": 29,
                    "expression": "targetRate = (prevRate * multRate) / 1e18;\ninterestRate = min(max(targetRate, minRate), maxRate);"
                },
                {
                    "function_name": "BetaDynamicInterestRateModel",
                    "line_number": 7,
                    "expression": "mapping (address => Config) public configs;\nuint96 adjustRate;"
                },
                {
                    "function_name": "BetaDynamicInterestRateModel",
                    "line_number": 20,
                    "expression": "multRate = 1e36 / (1e18 + (uint(config.adjustRate) * timePassed) / days);"
                }
            ],
            "file_name": "BetaDynamicInterestRateModel.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "isContract",
                    "line_number": 2,
                    "expression": "size := extcodesize(account)"
                }
            ],
            "file_name": "BetaOracleUniswapV3.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 1,
                    "expression": "interest_rate = interest_rate * (1 - adjust_rate / one_day);"
                }
            ],
            "file_name": "BTokenDeployer.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "accrue",
                    "line_number": 38,
                    "expression": "interest = (interestRate_ * totalLoan_ * timePassed) / (days) / 1e18;"
                },
                {
                    "function_name": "accrue",
                    "line_number": 40,
                    "expression": "interestRate = model.getNextInterestRate(interestRate_, totalLoanable_, totalLoan_, timePassed);"
                }
            ],
            "file_name": "BToken.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "_shortCallback",
                    "line_number": 68,
                    "expression": "uint amountPut = _amountReceived + uint(data.memo);"
                },
                {
                    "function_name": "_closeCallback",
                    "line_number": 84,
                    "expression": "uint amountTake = uint(-data.memo);"
                }
            ],
            "file_name": "BetaRunnerUniswapV3.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 16,
                    "expression": "uint targetRate = ( prevRate * multRate ) / 1e18 ;"
                },
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 14,
                    "expression": "multRate = 1e18 + ( upMaxRate * upScale ) / days / 1e18 ;"
                }
            ],
            "file_name": "BetaInterestModelV1_mutated.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 16,
                    "expression": "uint targetRate = ( prevRate * multRate ) / 1e18 ;"
                },
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 14,
                    "expression": "multRate = 1e18 + ( upMaxRate * upScale * cappedtimePassed ) / days / 1e18 ;"
                }
            ],
            "file_name": "BetaInterestModelV1.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "borrow",
                    "line_number": 68,
                    "expression": "ltv <= IBetaConfig(config).getSafetyLTV(underlyings[pos.bToken])",
                    "adjusted_expression": "ltv <= IBetaConfig(config) + getSafetyLTV(underlyings[pos.bToken])"
                },
                {
                    "function_name": "liquidate",
                    "line_number": 129,
                    "expression": "collValue + (collValue * IBetaConfig(config).getKillBountyRate(underlying)) / 1e18",
                    "adjusted_expression": "collValue + (collValue * IBetaConfig(config) + getKillBountyRate(underlying)) / 1e18"
                }
            ],
            "file_name": "BetaBank.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 70,
                    "expression": "price * (1 - adjust_rate / one_day)"
                }
            ],
            "file_name": "BetaOracleUniswapV2.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "_getAmountOut",
                    "line_number": 56,
                    "expression": "amountInWithFee * reserveOut / ((reserveIn * 1000) + amountInWithFee)"
                },
                {
                    "function_name": "_getAmountIn",
                    "line_number": 68,
                    "expression": "(reserveIn * amountOut * 1000 / ((reserveOut - amountOut) * 997)) + 1"
                },
                {
                    "function_name": "_getAmountsOut",
                    "line_number": 80,
                    "expression": "amounts[i + 1] = amounts[i] * reserveOut / reserveIn"
                },
                {
                    "function_name": "_getAmountsIn",
                    "line_number": 93,
                    "expression": "amounts[i - 1] = amounts[i] * reserveIn / reserveOut"
                },
                {
                    "function_name": "short",
                    "line_number": 16,
                    "expression": "amounts[amounts.length - 1] >= _amountOutMin && IUniswapV2Pair(_pairFor(_path[0], _path[1])).swap(_path[0] < _path[1] ? 0 : amounts[1], _path[0] < _path[1] ? amounts[1] : 0, address(this), abi.encode(CallbackData({pid: _pid, memo: _amountPutExtra.toInt256(), path: _path, amounts: amounts})))"
                },
                {
                    "function_name": "close",
                    "line_number": 23,
                    "expression": "amounts[0] <= _amountInMax && IUniswapV2Pair(_pairFor(_path[0], _path[1])).swap(_path[0] < _path[1] ? 0 : amounts[1], _path[0] < _path[1] ? amounts[1] : 0, address(this), abi.encode(CallbackData({pid: _pid, memo: -_amountTake.toInt256(), path: _path, amounts: amounts})))"
                }
            ],
            "file_name": "BetaRunnerUniswapV2.sol"
        },
        {
            "equation": "interest_rate = interest_rate * (1 - adjust_rate / one_day);\n            ",
            "equation_name": "addjust_rate_1",
            "expressions_matched": [
                {
                    "function_name": "_borrow",
                    "line_number": 19,
                    "expression": "_amountBorrow = _amountBorrow.mul(one_day.sub(adjust_rate)).divCeil(one_day);"
                },
                {
                    "function_name": "_repay",
                    "line_number": 28,
                    "expression": "_amountRepay = _amountRepay.mul(one_day.sub(adjust_rate)).div(one_day);"
                }
            ],
            "file_name": "BetaRunnerBase.sol"
        }
    ],
    "get_total_liquidity": [
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 2,
                    "expression": "constructor ( address _betaBank , address _weth ) BetaRunnerBase ( _betaBank , _weth ) {"
                },
                {
                    "function_name": "N/A",
                    "line_number": 3,
                    "expression": "}"
                },
                {
                    "function_name": "N/A",
                    "line_number": 4,
                    "expression": "_transferIn ( _collateral , msg . sender , _amountPut ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 5,
                    "expression": "_borrow ( msg . sender , _pid , _underlying , _collateral , _amountBorrow , _amountPut ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 6,
                    "expression": "_transferOut ( _underlying , msg . sender , _amountBorrow ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 8,
                    "expression": "_amountRepay = _capRepay ( msg . sender , _pid , _amountRepay ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 9,
                    "expression": "_transferIn ( _underlying , msg . sender , _amountRepay ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 10,
                    "expression": "_repay ( msg . sender , _pid , _underlying , _collateral , _amountRepay , _amountTake ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 11,
                    "expression": "_transferOut ( _collateral , msg . sender , _amountTake ) ;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 12,
                    "expression": "}"
                }
            ],
            "file_name": "BetaRunnerLending.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "calculateInterestRate",
                    "line_number": 23,
                    "expression": "totalLiquidity = totalAvailable + totalLoan;"
                }
            ],
            "file_name": "BetaDynamicInterestRateModel.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "isContract",
                    "line_number": 2,
                    "expression": "size > 0"
                }
            ],
            "file_name": "BetaOracleUniswapV3.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "unknown",
                    "line_number": 2,
                    "expression": "total_liquidity = total_avaiable + total_loan;"
                },
                {
                    "function_name": "unknown",
                    "line_number": 6,
                    "expression": "return address(uint160(uint(keccak256(abi.encodePacked(hex'', address(this), salt, code)))));"
                }
            ],
            "file_name": "BTokenDeployer.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "mint",
                    "line_number": 47,
                    "expression": "credit = (amount * supply) / (totalLoanable + totalLoan)"
                },
                {
                    "function_name": "burn",
                    "line_number": 63,
                    "expression": "amount = (_credit * (totalLoanable + totalLoan)) / supply"
                },
                {
                    "function_name": "borrow",
                    "line_number": 79,
                    "expression": "debtShare = ceilDiv(_amount * totalDebtShare, totalLoan); totalLoan += _amount; totalDebtShare += debtShare;"
                },
                {
                    "function_name": "repay",
                    "line_number": 95,
                    "expression": "debtShare = (amount * totalDebtShare) / totalLoan; totalLoan -= amount; totalDebtShare -= debtShare;"
                }
            ],
            "file_name": "BToken.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "BetaInterestModelV1",
                    "line_number": 10,
                    "expression": "totalLiquidity = totalAvailable.add(totalLoan);"
                },
                {
                    "function_name": "BetaInterestModelV1",
                    "line_number": 14,
                    "expression": "uint utilRate = totalLoan.mul(1e18).div(totalLiquidity);"
                }
            ],
            "file_name": "BetaInterestModelV1_mutated.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "BetaInterestModelV1",
                    "line_number": 10,
                    "expression": "totalLiquidity = totalAvailable + totalLoan;"
                }
            ],
            "file_name": "BetaInterestModelV1.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "fetchPositionLTV",
                    "line_number": 77,
                    "expression": "uint debtValue = IBetaOracle(oracle_).getAssetETHValue(underlyings[pos.bToken], debtSize);\nuint collCred = (pos.collateralSize * collFactor) / 1e18;\nuint collValue = IBetaOracle(oracle_).getAssetETHValue(pos.collateral, collCred);\nreturn (debtValue * 1e18) / collValue;"
                }
            ],
            "file_name": "BetaBank.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "total_liquidity = total_avaiable + total_loan;"
                }
            ],
            "file_name": "BetaConfig.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "_getAmountsOut",
                    "line_number": 77,
                    "expression": "amounts[amounts.length - 1] = amounts[amounts.length - 1] + amountCollateral;"
                },
                {
                    "function_name": "_getAmountsIn",
                    "line_number": 91,
                    "expression": "amounts[i - 1] = amounts[i] + _getAmountIn(amounts[i], reserveIn, reserveOut);"
                }
            ],
            "file_name": "BetaRunnerUniswapV2.sol"
        },
        {
            "equation": "total_liquidity = total_avaiable + total_loan;\n    ",
            "equation_name": "get_total_liquidity",
            "expressions_matched": [
                {
                    "function_name": "_borrow",
                    "line_number": 22,
                    "expression": "_amountBorrow + _amountCollateral"
                },
                {
                    "function_name": "_repay",
                    "line_number": 30,
                    "expression": "_amountRepay + _amountCollateral"
                }
            ],
            "file_name": "BetaRunnerBase.sol"
        }
    ],
    "get_LTV": [
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "unknown",
                    "line_number": 4,
                    "expression": "uint LTV = (_amountBorrow * price_btoken) / (_amountPut * collateral_factor * price_btoken);"
                },
                {
                    "function_name": "unknown",
                    "line_number": 8,
                    "expression": "uint LTV = (_amountBorrow * price_btoken) / (_amountPut * collateral_factor * price_btoken);"
                }
            ],
            "file_name": "BetaRunnerLending.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "getInterestRate",
                    "line_number": 34,
                    "expression": "(prevRate * multRate) / 1e18"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 35,
                    "expression": "(curRate * 1e18) / config.maxMult"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 36,
                    "expression": "(curRate * config.maxMult) / 1e18"
                }
            ],
            "file_name": "BetaDynamicInterestRateModel.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "_beforeTokenTransfer",
                    "line_number": 6,
                    "expression": "uint LTV = debt_share.mul(price_btoken).div(collateral_size.mul(collateral_factor).mul(price_btoken)).min(1);"
                }
            ],
            "file_name": "BetaToken.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "isContract",
                    "line_number": 2,
                    "expression": "size := extcodesize(account)"
                }
            ],
            "file_name": "BetaOracleUniswapV3.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 2,
                    "expression": "bytes32 salt = keccak256(abi.encode(msg.sender, _underlying));"
                },
                {
                    "function_name": "N/A",
                    "line_number": 3,
                    "expression": "return address(new BToken{salt: salt}(msg.sender, _underlying));"
                },
                {
                    "function_name": "N/A",
                    "line_number": 4,
                    "expression": "bytes memory args = abi.encode(_betaBank, _underlying);"
                },
                {
                    "function_name": "N/A",
                    "line_number": 5,
                    "expression": "bytes32 code = keccak256(abi.encodePacked(type(BToken).creationCode, args));"
                },
                {
                    "function_name": "N/A",
                    "line_number": 6,
                    "expression": "bytes32 salt = keccak256(args);"
                },
                {
                    "function_name": "N/A",
                    "line_number": 7,
                    "expression": "return address(uint160(uint(keccak256(abi.encodePacked(hex'', address(this), salt, code)))));"
                }
            ],
            "file_name": "BTokenDeployer.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "borrow",
                    "line_number": 68,
                    "expression": "uint debtShare = ceilDiv(_amount * totalDebtShare, totalLoan); uint LTV = (debtShare * price_btoken) / (collateral_size * collateral_factor * price_btoken);"
                },
                {
                    "function_name": "repay",
                    "line_number": 87,
                    "expression": "uint debtShare = (amount * totalDebtShare) / totalLoan; uint LTV = (debtShare * price_btoken) / (collateral_size * collateral_factor * price_btoken);"
                }
            ],
            "file_name": "BToken.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "_shortCallback",
                    "line_number": 70,
                    "expression": "(amountReceived + uint(data.memo)) * price_btoken / (collateral_size * collateral_factor * price_btoken)"
                },
                {
                    "function_name": "_closeCallback",
                    "line_number": 92,
                    "expression": "_amountToPay * price_btoken / (collateral_size * collateral_factor * price_btoken)"
                }
            ],
            "file_name": "BetaRunnerUniswapV3.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 16,
                    "expression": "( totalLoan * 1e18 ) / totalLiquidity"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 18,
                    "expression": "min ( timePassed , days )"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 19,
                    "expression": "uint multRate ;"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 21,
                    "expression": "multRate = 1e18 + ( upMaxRate * upScale ) * div(1, days) / 1e18 ;"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 23,
                    "expression": "uint targetRate = ( prevRate * multRate ) / 1e18 ;"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 24,
                    "expression": "return min ( max ( targetRate , minRate ) , maxRate ) ;"
                }
            ],
            "file_name": "BetaInterestModelV1_mutated.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 16,
                    "expression": "( totalLoan * 1e18 ) / totalLiquidity"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 18,
                    "expression": "min ( timePassed , days )"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 20,
                    "expression": "multRate = 1e18 + ( upMaxRate * upScale * cappedtimePassed ) * 1e18 / days / 1e18"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 22,
                    "expression": "( prevRate * multRate ) / 1e18"
                }
            ],
            "file_name": "BetaInterestModelV1.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "borrow",
                    "line_number": 70,
                    "expression": "require(ltv <= IBetaConfig(config).getSafetyLTV(underlyings[pos.bToken]), 'borrow/not-safe');\n"
                },
                {
                    "function_name": "liquidate",
                    "line_number": 120,
                    "expression": "uint collValue = IBetaOracle(oracle).convert(underlying, pos.collateral, debtValue);\nuint payout = min(collValue + (collValue * IBetaConfig(config).getKillBountyRate(underlying)) / 1e18, pos.collateralSize);\n"
                },
                {
                    "function_name": "fetchPositionLTV",
                    "line_number": 56,
                    "expression": "uint debtSize = BToken(pos.bToken).fetchDebtShareValue(pos.debtShare);\nuint debtValue = IBetaOracle(oracle_).getAssetETHValue(underlyings[pos.bToken], debtSize);\nuint collCred = (pos.collateralSize * collFactor) / 1e18;\nuint collValue = IBetaOracle(oracle_).getAssetETHValue(pos.collateral, collCred);\nif (debtValue >= collValue) {\n    return 1e18;\n}\nreturn (debtValue * 1e18) / collValue;\n"
                }
            ],
            "file_name": "BetaBank.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 70,
                    "expression": "(price * amount) / (1 << 112)"
                },
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 75,
                    "expression": "(amount * fromPrice) / toPrice"
                }
            ],
            "file_name": "BetaOracleUniswapV2.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "getSafetyLTV",
                    "line_number": 77,
                    "expression": "uint ltv = rConfigs[getRiskLevel(_token)].safetyLTV;\nrequire(ltv > 0, 'getSafetyLTV/no-ltv');\nreturn ltv;"
                },
                {
                    "function_name": "getLiquidationLTV",
                    "line_number": 87,
                    "expression": "uint ltv = rConfigs[getRiskLevel(_token)].liquidationLTV;\nrequire(ltv > 0, 'getLiquidationLTV/no-ltv');\nreturn ltv;"
                }
            ],
            "file_name": "BetaConfig.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "_short",
                    "line_number": 14,
                    "expression": "uint amounts = amountBorrow * price_btoken * (10 ** 18) / (collateral_size * collateral_factor * price_btoken) < (10 ** 18) ? amountBorrow : (collateral_size * collateral_factor * price_btoken) / price_btoken;"
                },
                {
                    "function_name": "_close",
                    "line_number": 23,
                    "expression": "uint amounts = amountRepay * price_btoken * (10 ** 18) / (collateral_size * collateral_factor * price_btoken) < (10 ** 18) ? amountRepay : (collateral_size * collateral_factor * price_btoken) / price_btoken;"
                }
            ],
            "file_name": "BetaRunnerUniswapV2.sol"
        },
        {
            "equation": "uint LTV = min(debt_share * price_btoken/ (collateral_size*collateral_factor*price_btoken), 1);\n    ",
            "equation_name": "get_LTV",
            "expressions_matched": [
                {
                    "function_name": "_borrow",
                    "line_number": 20,
                    "expression": "uint _pid = IBetaBank(betaBank).open(_owner, _underlying, _collateral);\nuint LTV = min(IBetaBank(betaBank).fetchPositionDebt(_owner, _pid) * priceBToken / (collateralSize * collateralFactor * priceBToken), 1);"
                },
                {
                    "function_name": "_repay",
                    "line_number": 29,
                    "expression": "uint LTV = min(IBetaBank(betaBank).fetchPositionDebt(_owner, _pid) * priceBToken / (collateralSize * collateralFactor * priceBToken), 1);"
                }
            ],
            "file_name": "BetaRunnerBase.sol"
        }
    ],
    "get_utilization_rate": [
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "getInterestRate",
                    "line_number": 23,
                    "expression": "(totalLoan * 1e18) / totalLiquidity"
                },
                {
                    "function_name": "getInterestRate",
                    "line_number": 28,
                    "expression": "utilRate = (totalLoan * 1e18) / totalLiquidity"
                }
            ],
            "file_name": "BetaDynamicInterestRateModel.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "isContract",
                    "line_number": 2,
                    "expression": "size := extcodesize(account)"
                }
            ],
            "file_name": "BetaOracleUniswapV3.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 1,
                    "expression": "utilization_rate = total_loan / total_liquidity;"
                }
            ],
            "file_name": "BTokenDeployer.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "None",
                    "line_number": 0,
                    "expression": "(totalLoanable + totalLoan == 0) ? 0 : totalLoan / (totalLoanable + totalLoan)"
                },
                {
                    "function_name": "None",
                    "line_number": 0,
                    "expression": "totalLoan / (totalLoanable + totalLoan)"
                }
            ],
            "file_name": "BToken.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 14,
                    "expression": "(totalLoan * 1e18) / totalLiquidity"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 18,
                    "expression": "utilRate < 0.5e18 ? 1e18 + (downMaxRate * downScale) / days / 1e18 : utilRate < 0.7e18 ? 1e18 + (midMaxRate * midScale) / days / 1e18 : utilRate < 0.8e18 ? 1e18 + (upMaxRate * upScale) / days / 1e18 : 1e18 + (upMaxRate * upScale) / days / 1e18"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 20,
                    "expression": "(prevRate * multRate) / 1e18"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 21,
                    "expression": "min(max(targetRate, minRate), maxRate)"
                }
            ],
            "file_name": "BetaInterestModelV1_mutated.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "calculateRate",
                    "line_number": 14,
                    "expression": "(totalLoan * 1e18) / totalLiquidity"
                },
                {
                    "function_name": "calculateRate",
                    "line_number": 18,
                    "expression": "utilRate < 0.5e18 ? 0 : utilRate < 0.7e18 ? 1e18 / 2 + (utilRate - 0.5e18) * 1e18 / 4 : utilRate < 0.8e18 ? 1e18 * 3 / 4 + (utilRate - 0.7e18) * 1e18 / 10 : upMaxRate * upScale * cappedtimePassed / days / 1e18 + 1e18"
                }
            ],
            "file_name": "BetaInterestModelV1.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "fetchPositionLTV",
                    "line_number": 87,
                    "expression": "(BToken(pos.bToken).fetchDebtShareValue(pos.debtShare) * 1e18) / (IBetaOracle(oracle).getAssetETHValue(underlyings[pos.bToken], pos.collateralSize) * IBetaConfig(config).getSafetyLTV(underlyings[pos.bToken]))"
                },
                {
                    "function_name": "fetchPositionLTV",
                    "line_number": 88,
                    "expression": "(BToken(pos.bToken).fetchDebtShareValue(pos.debtShare) * 1e18) / (IBetaOracle(oracle).getAssetETHValue(underlyings[pos.bToken], pos.collateralSize) * IBetaConfig(config).getSafetyLTV(underlyings[pos.bToken]))"
                }
            ],
            "file_name": "BetaBank.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "getAssetETHPrice",
                    "line_number": 70,
                    "expression": "uint price = getAssetETHPrice(token);\nreturn (price * total_loan) / (1 << 112) / total_liquidity;"
                }
            ],
            "file_name": "BetaOracleUniswapV2.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "uint factor = cFactors[_token];\nrequire(factor > 0, 'getCollFactor/no-collateral-factor');\nreturn factor;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "uint ltv = rConfigs[getRiskLevel(_token)].safetyLTV;\nrequire(ltv > 0, 'getSafetyLTV/no-ltv');\nreturn ltv;"
                },
                {
                    "function_name": "N/A",
                    "line_number": 0,
                    "expression": "uint ltv = rConfigs[getRiskLevel(_token)].liquidationLTV;\nrequire(ltv > 0, 'getLiquidationLTV/no-ltv');\nreturn ltv;"
                }
            ],
            "file_name": "BetaConfig.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "_getAmountsOut",
                    "line_number": 77,
                    "expression": "(amountIn * reserveOut * 1000) / ((reserveIn * 1000) + (amountIn * 997))"
                },
                {
                    "function_name": "_getAmountsIn",
                    "line_number": 91,
                    "expression": "((reserveIn * amountOut * 1000) / ((reserveOut - amountOut) * 997)) + 1"
                }
            ],
            "file_name": "BetaRunnerUniswapV2.sol"
        },
        {
            "equation": "uint utilization_rate = total_loan / total_liquidity;\n    ",
            "equation_name": "get_utilization_rate",
            "expressions_matched": [
                {
                    "function_name": "_borrow",
                    "line_number": 18,
                    "expression": "_amountBorrow / _amountCollateral"
                },
                {
                    "function_name": "_repay",
                    "line_number": 26,
                    "expression": "_amountRepay / _amountCollateral"
                }
            ],
            "file_name": "BetaRunnerBase.sol"
        }
    ]
}