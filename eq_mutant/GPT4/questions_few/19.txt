Please analyze the two following provided code files in C or Java. Identify if they are semantically equal. 'Semantically equal' means two codes have the same meaning, that they have the same output given the same input.&#10;Here are three semantically equal examples:  &#10;The first example pair is&#10;``` Code 1&#10;double f(double M, double x) {&#10;    x = (M + x) / 2;&#10;    return x;&#10; }&#10;```&#10;``` Mutant Code 1&#10;double f(double M, double x) {&#10;    x = (M + x++ ) / 2;&#10;    return x;&#10; }&#10;```&#10;Yes. The two codes are semantically euqal because `M + x++` first does `M + x` and then `x++`. Therefore, `(M + x) / 2` is the same with `(M + x++) / 2`.&#10;&#10;&#10;The second example pair is &#10;``` Code 2&#10;double f(int x, int divisor){&#10;   return x*divisor;&#10;}&#10;```&#10;```Mutant Code 2&#10;double f(int x, int divisor){&#10;    return x*divisor++;&#10;}&#10;```&#10;Yes. The two codes are semantically euqal because `x*divisor` first does `x*divisor` and then `divisor++`. The two functions return the same values.&#10;&#10;&#10;The third example pair is &#10;``` Code 3&#10;int f(int a, int y, int x){&#10;    int p = a;&#10;    p = x + y;&#10;    return p;&#10;}&#10;```&#10;``` Mutant Code 3&#10;int f(int a, int y, int x){&#10;    int p = 1;&#10;    p = x + y;&#10;    return p;&#10;}&#10;```&#10;Yes. The two codes are semantically euqal because the local value `p` is re-assigned by `x+y`. There, the change `int p = 1;` will not affect the function.&#10;&#10;  &#10;&#10;Please identify if the two following codes are semantically equal. Please only answer `yes` or `no`. `yes` means they are semantically equal. `no` means they are not. &#10;Input :&#10;    ```Code &#10;#include <stdio.h>&#10;main() &#10;{ &#10;	unsigned int day,month,year,sum,leap; &#10;	printf("\n please input year,month,day\n"); &#10;	scanf("%d,%d,%d",&year,&month,&day); &#10;	switch(month) &#10;	{	case 1:sum=0;&#10;			break; &#10;		case 2:sum=31;&#10;			break;&#10;		case 3:sum=59;&#10;			break; &#10;		case 4:sum=90;&#10;			break;&#10;		case 5:sum=120;&#10;			break; &#10;		case 6:sum=151;&#10;			break; &#10;		case 7:sum=181;&#10;			break; &#10;		case 8:sum=212;&#10;			break; &#10;		case 9:sum=243;&#10;			break; &#10;		case 10:sum=273;&#10;			break; &#10;		case 11:sum=304;&#10;			break;&#10;		case 12:sum=334;&#10;			break; &#10;		default:printf("data error");&#10;			break; } &#10;	sum=sum+day;&#10;	if(year%400==0||(year%4==0&&year%100!=0))&#10;		leap=1; &#10;	else &#10;		leap=0; &#10;	if(leap==1&&month>2)&#10;		sum++; &#10;	printf("It is the %d th day.",sum);&#10;}&#10;&#10;```&#10;```Mutant Code &#10;#include <stdio.h>&#10;main() &#10;{ &#10;	unsigned int day,month,year,sum,leap; &#10;	printf("\n please input year,month,day\n"); &#10;	scanf("%d,%d,%d",&year,&month,&day); &#10;	switch(month) &#10;	{	case 1:sum=0;&#10;			break; &#10;		case 2:sum=31;&#10;			break;&#10;		case 3:sum=59;&#10;			break; &#10;		case 4:sum=90;&#10;			break;&#10;		case 5:sum=120;&#10;			break; &#10;		case 6:sum=151;&#10;			break; &#10;		case 7:sum=181;&#10;			break; &#10;		case 8:sum=212;&#10;			break; &#10;		case 9:sum=243;&#10;			break; &#10;		case 10:sum=273;&#10;			break; &#10;		case 11:sum=304;&#10;			break;&#10;		case 12:sum=334;&#10;			break; &#10;		default:printf("data error");&#10;			break; } &#10;	sum=sum+day;&#10;	if(year%400==0||(year%4==0&&year-100!=0))&#10;		leap=1; &#10;	else &#10;		leap=0; &#10;	if(leap==1&&month>2)&#10;		sum++; &#10;	printf("It is the %d th day.",sum);&#10;}&#10;&#10;```&#10;The difference patch is &#10;&#10;    ```&#10;    @@ -35 +35 @@&#10;-	if(year%400==0||(year%4==0&&year%100!=0))&#10;+	if(year%400==0||(year%4==0&&year-100!=0))&#10;&#10;    ```