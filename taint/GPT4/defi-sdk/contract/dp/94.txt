Yes

The variable `returnedAmount` in the function `emitExecuted` is data dependent on the variable `protocolFeeAmount` in the function `getReturnedAmounts`. This is because `returnedAmount` is calculated based on the `outputBalanceChange`, `protocolFee.share`, and `marketplaceFee.share` within the `getReturnedAmounts` function. The `protocolFeeAmount` is also calculated within the same function using some of these shared values, specifically the `outputBalanceChange` and `protocolFee.share`. The calculation of `returnedAmount` indirectly depends on the calculation of `protocolFeeAmount` because they both are derived from the same set of inputs and are part of the same transactional operation that determines the distribution of the output balance change after a swap. The `emitExecuted` function is then called with the `returnedAmount` and `protocolFeeAmount` among other parameters, indicating a data dependency as the values of these variables are related to each other and are used together to represent the outcome of the swap operation.