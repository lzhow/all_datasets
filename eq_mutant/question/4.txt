Please analyze the two following provided code files in C or Java. Identify if they are semantically equal. 'Semantically equal' means two codes have the same meaning, that they have the same output given the same input.
Here are three semantically equal examples:  
The first example pair is
``` Code 1
double f(double M, double x) {
    x = (M + x) / 2;
    return x;
 }
```
``` Mutant Code 1
double f(double M, double x) {
    x = (M + x++ ) / 2;
    return x;
 }
```
Yes. The two codes are semantically euqal because `M + x++` first does `M + x` and then `x++`. Therefore, `(M + x) / 2` is the same with `(M + x++) / 2`.


The second example pair is 
``` Code 2
double f(int x, int divisor){
   return x*divisor;
}
```
```Mutant Code 2
double f(int x, int divisor){
    return x*divisor++;
}
```
Yes. The two codes are semantically euqal because `x*divisor` first does `x*divisor` and then `divisor++`. The two functions return the same values.


The third example pair is 
``` Code 3
int f(int a, int y, int x){
    int p = a;
    p = x + y;
    return p;
}
```
``` Mutant Code 3
int f(int a, int y, int x){
    int p = 1;
    p = x + y;
    return p;
}
```
Yes. The two codes are semantically euqal because the local value `p` is re-assigned by `x+y`. There, the change `int p = 1;` will not affect the function.

  

Please identify if the two following codes are semantically equal. Please only answer `yes` or `no`. `yes` means they are semantically equal. `no` means they are not. 
Input :
    ```Code 
// This is a mutant program.
// Author : ysma

public class Bisect
{

    double mEpsilon;

    double mNumber;

    double mResult;

    public Bisect()
    {
    }

    public  void setEpsilon( double epsilon )
    {
        this.mEpsilon = epsilon;
    }

    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = (M + x) / 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }

}

```
```Mutant Code 
// This is a mutant program.
// Author : ysma

public class Bisect
{

    double mEpsilon;

    double mNumber;

    double mResult;

    public Bisect()
    {
    }

    public  void setEpsilon( double epsilon )
    {
        this.mEpsilon = epsilon;
    }

    public  double sqrt( double N )
    {
        double x = N;
        double M = N;
        double m = 1;
        double r = x;
        double diff = x * x - N;
        while (Math.abs(diff) > mEpsilon) {
            if (diff < 0) {
                m = x;
                x = 2;
            } else {
                if (diff > 0) {
                    M = x;
                    x = (m + x) / 2;
                }
            }
            diff = x * x - N;
        }
        r = x;
        mResult = r;
        return r;
    }

}

```
The difference patch is 

    ```
    @@ -32 +32 @@
-                x = (M + x) / 2;
+                x = 2;

    ```