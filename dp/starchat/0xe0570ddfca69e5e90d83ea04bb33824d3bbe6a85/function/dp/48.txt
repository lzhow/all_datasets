
The contract has a function called withdraw that takes in a uint called _share. It then calculates the amount of want that the sender should receive based on how much of the total supply they own.

First, it calculates r, which is equal to (the balance of all the want multiplied by the number of shares the user owns) divided by (total supply of Shares).
Then, the program checks if the balance in this contract is less than r (if not, then the strategy contract would have more want than this one, and the withdraw function would fail). If the condition is met, we then call the _Burn function, where it transfers the shares from the msg.Sender to the address of this smart contract, effectively reducing the supply. 

Afterwards, b is set to equal the current balance (want) of that contract. Then, if b (which is now the new balance) is smaller than the calculated r value, meaning that there is more of "want" in total than we need to withdraw, this program calls the "withdraw" function of strategy, passing in _withDraw, a variable that represents the difference between the two values. This function is supposed to transfer the excess want to another contract (such as a