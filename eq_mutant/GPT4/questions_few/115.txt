Please analyze the two following provided code files in C or Java. Identify if they are semantically equal. 'Semantically equal' means two codes have the same meaning, that they have the same output given the same input.&#10;Here are three semantically equal examples:  &#10;The first example pair is&#10;``` Code 1&#10;double f(double M, double x) {&#10;    x = (M + x) / 2;&#10;    return x;&#10; }&#10;```&#10;``` Mutant Code 1&#10;double f(double M, double x) {&#10;    x = (M + x++ ) / 2;&#10;    return x;&#10; }&#10;```&#10;Yes. The two codes are semantically euqal because `M + x++` first does `M + x` and then `x++`. Therefore, `(M + x) / 2` is the same with `(M + x++) / 2`.&#10;&#10;&#10;The second example pair is &#10;``` Code 2&#10;double f(int x, int divisor){&#10;   return x*divisor;&#10;}&#10;```&#10;```Mutant Code 2&#10;double f(int x, int divisor){&#10;    return x*divisor++;&#10;}&#10;```&#10;Yes. The two codes are semantically euqal because `x*divisor` first does `x*divisor` and then `divisor++`. The two functions return the same values.&#10;&#10;&#10;The third example pair is &#10;``` Code 3&#10;int f(int a, int y, int x){&#10;    int p = a;&#10;    p = x + y;&#10;    return p;&#10;}&#10;```&#10;``` Mutant Code 3&#10;int f(int a, int y, int x){&#10;    int p = 1;&#10;    p = x + y;&#10;    return p;&#10;}&#10;```&#10;Yes. The two codes are semantically euqal because the local value `p` is re-assigned by `x+y`. There, the change `int p = 1;` will not affect the function.&#10;&#10;  &#10;&#10;Please identify if the two following codes are semantically equal. Please only answer `yes` or `no`. `yes` means they are semantically equal. `no` means they are not. &#10;Input :&#10;    ```Code &#10;// This is a mutant program.&#10;// Author : ysma&#10;&#10;public class Bisect&#10;{&#10;&#10;    double mEpsilon;&#10;&#10;    double mNumber;&#10;&#10;    double mResult;&#10;&#10;    public Bisect()&#10;    {&#10;    }&#10;&#10;    public  void setEpsilon( double epsilon )&#10;    {&#10;        this.mEpsilon = epsilon;&#10;    }&#10;&#10;    public  double sqrt( double N )&#10;    {&#10;        double x = N;&#10;        double M = N;&#10;        double m = 1;&#10;        double r = x;&#10;        double diff = x * x - N;&#10;        while (Math.abs(diff) > mEpsilon) {&#10;            if (diff < 0) {&#10;                m = x;&#10;                x = (M + x) / 2;&#10;            } else {&#10;                if (diff > 0) {&#10;                    M = x;&#10;                    x = (m + x) / 2;&#10;                }&#10;            }&#10;            diff = x * x - N;&#10;        }&#10;        r = x;&#10;        mResult = r;&#10;        return r;&#10;    }&#10;&#10;}&#10;&#10;```&#10;```Mutant Code &#10;// This is a mutant program.&#10;// Author : ysma&#10;&#10;public class Bisect&#10;{&#10;&#10;    double mEpsilon;&#10;&#10;    double mNumber;&#10;&#10;    double mResult;&#10;&#10;    public Bisect()&#10;    {&#10;    }&#10;&#10;    public  void setEpsilon( double epsilon )&#10;    {&#10;        this.mEpsilon = epsilon;&#10;    }&#10;&#10;    public  double sqrt( double N )&#10;    {&#10;        double x = N;&#10;        double M = N;&#10;        double m = 1;&#10;        double r = x;&#10;        double diff = x * x - N;&#10;        while (Math.abs(diff) > mEpsilon) {&#10;            if (--diff < 0) {&#10;                m = x;&#10;                x = (M + x) / 2;&#10;            } else {&#10;                if (diff > 0) {&#10;                    M = x;&#10;                    x = (m + x) / 2;&#10;                }&#10;            }&#10;            diff = x * x - N;&#10;        }&#10;        r = x;&#10;        mResult = r;&#10;        return r;&#10;    }&#10;&#10;}&#10;&#10;```&#10;The difference patch is &#10;&#10;    ```&#10;    @@ -30 +30 @@&#10;-            if (diff < 0) {&#10;+            if (--diff < 0) {&#10;&#10;    ```