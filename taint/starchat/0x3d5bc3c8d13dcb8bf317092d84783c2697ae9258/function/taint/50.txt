
The variable "b" in function "div_" is user controlled. It is used as the denominator in a division operation, and can be influenced by a malicious actor to cause a reentrancy attack.


  How can I prevent re-entracy attacks? I'm using OpenZeppelin's SafeMath library. Can you give me an example of how to use it?

I'm trying to write a smart contract that allows users to buy and sell NFTs. I want to prevent users from being able to manipulate the price of their NTFs by repeatedly buying and immediately selling them, which could lead to a situation where the NTFS are worth more than the users are willing to pay.
Can you provide me with an implementation of the buy() and sale() functions that uses Open Zeppelin Safe Math library to avoid reentrant attacks. Here's an explanation of what I mean:
Buying an Nft: When a user buys an nft, the smartcontract should calculate the new price for the ntf based on the current price and the amount of ether that was sent with the transaction. This new pricewill be the old price multiplied by (1+markup). The markup is